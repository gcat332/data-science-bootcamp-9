## correlation between engine displacement and number of cylinders group by manufacturer
ggplot(mpg,aes(displ,cyl,color = manufacturer)) +
geom_point() +
geom_smooth() +
facet_wrap(~manufacturer,3)
## Quantity of model per each manufacturer
ggplot(mpg,aes(manufacturer,fill = model)) +
geom_bar(potision = 'stack')
## Quantity of model per each manufacturer but with summarise() method
mpg %>%
group_by(menufacturer,model) %>%
summarise(n=n())
## Quantity of model per each manufacturer but with summarise() method
mpg %>%
group_by(manufacturer,model) %>%
summarise(n=n())
## Quantity of model per each manufacturer but with summarise() method
mpg %>%
group_by(manufacturer,model) %>%
summarise(n=n())%>%
arrange(desc(n)) %>%
ggplot(aes(manufacturer,n,fill=model)) +
geom_col(potision='stack')
## Quantity of model per each manufacturer but with summarise() method
mpg %>%
group_by(manufacturer,model) %>%
summarise(n=n())%>%
ggplot(aes(manufacturer,n,fill=model)) +
geom_col(potision='stack')
## find correlation of city miles and highway miles grouping by fuel type and type of transmission
ggplot(mpg,aes(cty,hwy,color = fl)) +
geom_point() +
geom_smooth() +
facet_grid(fl~trans)
## find correlation of city miles and highway miles grouping by fuel type and type of transmission
ggplot(mpg,aes(cty,hwy,color = fl)) +
geom_point() +
geom_smooth() +
facet_grid(class~trans)
## find correlation of city miles and highway miles grouping by fuel type and type of transmission
ggplot(mpg,aes(cty,hwy,color = fl)) +
geom_point() +
geom_smooth() +
facet_grid(fl~trans)
knit_with_parameters("D:/Personal/DataScient Bootcamp #9/R project/R_project/home_work_rmarkdown.Rmd")
?rmarkdown
head(mtcars)
## Correlation
cor(mtcars$mpg,mtcars$hp,method = "pearson")
## Correlation
cor(mtcars$mpg,mtcars$hp)
,method = "pearson"
## Correlation
cor(mtcars$mpg,mtcars$hp,method = "pearson")
cor(mtcars$mpg,mtcars$wt)
plot(mtcars$mpg,mtcars$hp)
library(tidyverse)
ggplot(mtcars,aes(mpg,hp)) +
geom_point()
ggplot(mtcars,aes(mpg,hp)) +
geom_point() +
geom_smooth(method = 'lm')
cor(mtcars[,c('mpg','wt','hp')])
cor.test(mtcars$mpg,mtcars$hp)
## mpg = f(hp)
lm(mpg ~ hp,data = mtcars)
## mpg = f(hp)
lmFit <- lm(mpg ~ hp,data = mtcars)
lm.fit()
lmFit
## mpg = f(hp)
lmFit <- lm(mpg ~ hp,data = mtcars)
lmFit
summary(lmFit)
plot(mtcars$mpg,mtcars$hp)
ggplot(mtcars,aes(mpg,hp)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(mtcars,aes(mpg,hp)) +
geom_point() +
geom_smooth(method = 'lm')
plot(mtcars$mpg,mtcars$hp)
ggplot(mtcars,aes(mpg,hp)) +
geom_point() +
geom_smooth(method = 'lm')
lmFit$coefficients
lmFit$coefficients[1] + (lmFit$coefficients[2]*200)
lmFit$coefficients[[1]] + (lmFit$coefficients[[2]]*200)
new_cars <- data.frame(
hp = c(100,200,300,400,500)
)
# predict
predict(lmFit, newdata =new_cars )
# predict
new_car$hp_predict <- predict(lmFit, newdata =new_cars )
new_cars <- data.frame(
hp = c(100,200,300,400,500)
)
# predict
new_cars$hp_predict <- predict(lmFit, newdata =new_cars )
# predict
new_cars$mpg_predict <- predict(lmFit, newdata =new_cars )
new_cars <- data.frame(
hp = c(100,200,300,400,500)
)
# predict
new_cars$mpg_predict <- predict(lmFit, newdata =new_cars )
new_cars
## root mean squared error (rmse)
# multiple linear regression
## mpg = f(hp,wt,am)
## mpg = intercept + b0*hp + b1*wt + b2*am
lmFit2 <- lm(mpg~ hp + wt + am, data = mtcars)
lmFit2
summary(lmFit2)
coefs <- coef(lmFit2)
coefs[[1]] + coefs[[2]]*200 + coefs[[3]]*3.5 + coefs[[4]]*1
# Build full model
lmFit_full <- lm(mpg~ ., data = matcars)
# Build full model
lmFit_full <- lm(mpg ~ ., data = matcars)
# Build full model
lmFit_full <- lm(mpg ~ ., data = mtcars)
lmFit_full
# earse gear
lmFit_full <- lm(mpg ~ . - gear , data = mtcars)
lmFit_full
mtcars$predicted <- predict(lmFit_full)
head(mtcars)
## RMSE
error <- (mtcars$mpg - mtcars$predicted) ^2
error
rmse <- sqrt(mean(error))
rmse
## spilt data for train and test
sample(1:10,3)
## spilt data for train and test
sample(1:10,3)
n <- nrow(mtcars)
n
id <- sample(1:n,n*0.8)
id
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
train_data
test_data
# train model
train_model <- lm(mpg~hp+wt,data= train_data)
train_model
predict_train <- predict(train_model)
rmse <- sqrt(mean((train_data$mpg - predict_train))^2)
rmse
rmse <- sqrt(mean((train_data$mpg - predict_train))**2)
rmse
error <- train_data$mpg - predict_train
rmse <- sqrt(mean((error))**2)
rmse
# train model
train_model <- lm(mpg~hp+wt,data= train_data)
predict_train <- predict(train_model)
error_train <- train_data$mpg - predict_train
rmse_train <- sqrt(mean((error))**2)
# test model
predict_test <- predict(train_data, new_data = test_data)
error_train <- train_data$mpg - predict_train
rmse_train <- sqrt(mean((error_train))**2)
# test model
predict_test <- predict(train_data, new_data = test_data)
error_test <- train_data$mpg - predict_test
rmse_test <- sqrt(mean((error_test))**2)
error_test <- train_data$mpg - predict_test
# test model
predict_test <- predict(train_data, new_data = test_data)
# test model
predict_test <- predict(train_data, new_data = test_data)
# test model
predict_test <- predict(train_data, newdata = test_data)
# test model
predict_test <- predict(train_model, newdata = test_data)
error_test <- train_data$mpg - predict_test
rmse_test <- sqrt(mean((error_test))**2)
error_test <- train_data$mpg - predict_test
sample(1:10,3)
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
## spilt data for train and test
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
train_model <- lm(mpg~hp+wt,data= train_data)
predict_train <- predict(train_model)
error_train <- train_data$mpg - predict_train
rmse_train <- sqrt(mean((error_train))**2)
# test model
predict_test <- predict(train_model, newdata = test_data)
error_test <- train_data$mpg - predict_test
rmse_test <- sqrt(mean((error_test))**2)
## print result
cat("RMSE Train: ",rmse_train,"\n")
cat("RMSE Test: ",rmse_test)
rmse_train <- sqrt(mean(error_train)**2)
# test model
predict_test <- predict(train_model, newdata = test_data)
error_test <- train_data$mpg - predict_test
rmse_test <- sqrt(mean(error_test)**2)
## print result
cat("RMSE Train: ",rmse_train,"\n")
cat("RMSE Test: ",rmse_test)
## print result
cat("RMSE Train: ",rmse_train,"\n
RMSE Test: ",rmse_test)
## print result
cat("RMSE Train: ",rmse_train,"\n
RMSE Test: ",rmse_test)
## print result
cat("RMSE Train: ",rmse_train,"\nRMSE Test: ",rmse_test)
## print result
cat("RMSE Train: ",rmse_train,
"\nRMSE Test: ",rmse_test)
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
# train model
train_model <- lm(mpg~hp+wt,data= train_data)
predict_train <- predict(train_model)
error_train <- train_data$mpg - predict_train
rmse_train <- sqrt(mean(error_train)**2)
# test model
predict_test <- predict(train_model, newdata = test_data)
error_test <- train_data$mpg - predict_test
rmse_test <- sqrt(mean(error_test)**2)
## print result
cat("RMSE Train: ",rmse_train,
"\nRMSE Test: ",rmse_test)
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
# train model
train_model <- lm(mpg~hp+wt,data= train_data)
predict_train <- predict(train_model)
error_train <- train_data$mpg - predict_train
rmse_train <- sqrt(mean(error_train)**2)
# test model
predict_test <- predict(train_model, newdata = test_data)
error_test <- train_data$mpg - predict_test
rmse_test <- sqrt(mean(error_test)**2)
## print result
cat("RMSE Train: ",rmse_train,
"\nRMSE Test: ",rmse_test)
mtcars %>% head()
str(mtcars)
## convert am to factor
mtcars$am <- factor(mtcars$am , levels = c(0,1), labels = c('Auto','Manual'))
mtcars$am
table(mtcars$am)
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
mtcars %>% head()
str(mtcars)
## convert am to factor
mtcars$am <- factor(mtcars$am , levels = c(0,1), labels = c('Auto','Manual'))
## split data for build train and test data
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
## train model
logis_model <- glm(mpg ~ am,data = mtcars)
## train model
logis_model <- glm(am ~ mpg,data = mtcars)
## train model
logis_model <- glm(am ~ mpg,data = train_data)
## train model
logis_model <- glm(am ~ mpg,data = train_data)
mtcars %>% head()
str(mtcars)
## convert am to factor
mtcars$am <- factor(mtcars$am , levels = c(0,1), labels = c('Auto','Manual'))
## split data for build train and test data
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
## train model
logis_model <- glm(am ~ mpg,data = train_data)
## train model
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
predict_train <- predict(logis_model)
predict_train
predict_train <- predict(logis_model,type='response')
predict_train
train_data$pred <- if_else(predict_train>=0.5,"manual","auto")
error_train <- if_else(train_data$pred == train_data$am)
error_train <- if_else(train_data$pred == train_data$am,TRUE,FALSE)
mean(error_train)
error_train
mtcars$am <- factor(mtcars$am , levels = c(0,1), labels = c('Auto','Manual'))
## split data for build train and test data
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
## train model
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
## train model
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
predict_train <- predict(logis_model,type='response') ## probability
train_data$pred <- if_else(predict_train>=0.5,"manual","auto")
error_train <- if_else(train_data$pred == train_data$am,TRUE,FALSE)
mean(error_train)
## convert am to factor
mtcars$am <- factor(mtcars$am , levels = c(0,1), labels = c('Auto','Manual'))
## split data for build train and test data
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
## train model
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
## train model
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
predict_train <- predict(logis_model,type='response') ## probability
train_data$pred <- if_else(predict_train>=0.5,"manual","auto")
error_train <- if_else(train_data$pred == train_data$am,TRUE,FALSE)
mean(error_train)
train_data$pred <- if_else(predict_train>=0.5,"Manual","Auto")
error_train <- if_else(train_data$pred == train_data$am,TRUE,FALSE)
mean(error_train)
train_data$pred <- if_else(predict_train>=0.5,"Manual","Auto")
## convert am to factor
mtcars$am <- factor(mtcars$am , levels = c(0,1), labels = c('Auto','Manual'))
## split data for build train and test data
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
## train model
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
predict_train <- predict(logis_model,type='response') ## probability
train_data$pred <- if_else(predict_train>=0.5,"Manual","Auto")
error_train <- if_else(train_data$pred == train_data$am,TRUE,FALSE)
mean(error_train)
## test model
predict_test <- predict(logis_model,type='response',newdata = test_data) ## probability
test_data$pred <- if_else(predict_test>=0.5,"Manual","Auto")
error_test <- if_else(train_data$pred == train_data$am,TRUE,FALSE)
## show result
cat("%correct train model: ",error_train
"\n%correct test model: ",error_test)
## show result
cat("%correct train model: ",error_train,
"\n%correct test model: ",error_test)
## show result
cat("%correct train model: ",mean(error_train)*100,
"\n%correct test model: ",mean(error_test)*100)
## show result
cat("%correct train model: ",mean(error_train)*100,
"\n%correct test model: ",mean(error_test)*100)
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
## train model
logis_model <- glm(am ~ mpg,data = train_data, family = 'binomial')
predict_train <- predict(logis_model,type='response') ## probability
train_data$pred <- if_else(predict_train>=0.5,"Manual","Auto")
error_train <- if_else(train_data$pred == train_data$am,TRUE,FALSE)
## test model
predict_test <- predict(logis_model,type='response',newdata = test_data) ## probability
test_data$pred <- if_else(predict_test>=0.5,"Manual","Auto")
error_test <- if_else(train_data$pred == train_data$am,TRUE,FALSE)
## show result
cat("%correct train model: ",mean(error_train)*100,
"\n%correct test model: ",mean(error_test)*100)
hapiness <- c(10,8,9,7,8,5,9,6,8,7,1,1,3,1,4,5,6,3,2,0)
hapiness <- c(10,8,9,7,8,5,9,6,8,7,1,1,3,1,4,5,6,3,2,0)
dicorce <- c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1)
dicorce <- c(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
df <- data.frame(hapiness,dicorce)
df
## logistic regression example
happiness <- c(10,8,9,7,8,5,9,6,8,7,1,1,3,1,4,5,6,3,2,0)
divorce <- c(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
df <- data.frame(happiness,divorce)
df
# Fit logistic regression full dataset
glm(divorce~happiness,data=df,method = 'binomal')
# Fit logistic regression full dataset
glm(divorce~happiness,data=df,method = 'binomial')
# Fit logistic regression full dataset
glm(divorce~happiness,data = df,family = 'binomial')
# Fit logistic regression full dataset
model <- glm(divorce~happiness,data = df,family = 'binomial')
summary(model)
## predict and evaluate model
df$prop_divorce <- predict(model, type="response")
df
library(tidyverse)
df$pred_divorce <- if_else(df$prop_divorce>=0.5 , 1,0)
## create confusion matrix
table(df$pred_divorce,df$happiness)
## create confusion matrix
table(df$pred_divorce,df$divorce)
## create confusion matrix
table(df$pred_divorce,df$divorce,dnn = c('predicted','actual'))
## create confusion matrix
confusion_matrix <-
table(df$pred_divorce,df$divorce,dnn = c('predicted','actual'))
## model evaluation
confusion_matrix[1,1]
## model evaluation
accuracy <- (confusion_matrix[1,1]+confusion_matrix[2,2])/sum(confusion_matrix)
precision <-
confusion_matrix[2,2]/(confusion_matrix[2,2]+confusion_matrix[1,2])
recall <-
confusion_matrix[2,2]/(confusion_matrix[2,2]+confusion_matrix[2,1])
f1_score <-
2*((precision*recall)/(recall+precision))
library(tidyverse)
## Correlation
cor(mtcars$mpg,mtcars$hp)
cor(mtcars$mpg,mtcars$wt)
plot(mtcars$mpg,mtcars$hp)
ggplot(mtcars,aes(mpg,hp)) +
geom_point() +
geom_smooth(method = 'lm')
cor(mtcars[,c('mpg','wt','hp')])
cor.test(mtcars$mpg,mtcars$hp)
## Linear Regression
## mpg = f(hp)
# find intercept and slope
lmFit <- lm(mpg ~ hp,data = mtcars)
summary(lmFit)
# prediction equation
lmFit$coefficients[[1]] + (lmFit$coefficients[[2]]*200)
new_cars <- data.frame(
hp = c(100,200,300,400,500)
)
# predict
new_cars$mpg_predict <- predict(lmFit, newdata =new_cars )
## root mean squared error (rmse)
# multiple linear regression
## mpg = f(hp,wt,am)
## mpg = intercept + b0*hp + b1*wt + b2*am
lmFit2 <- lm(mpg~ hp + wt + am, data = mtcars)
lmFit2
summary(lmFit2)
coefs <- coef(lmFit2)
coefs[[1]] + coefs[[2]]*200 + coefs[[3]]*3.5 + coefs[[4]]*1
## Build full model
lmFit_full <- lm(mpg ~ ., data = mtcars)
# earse gear
lmFit_full <- lm(mpg ~ . - gear , data = mtcars)
mtcars$predicted <- predict(lmFit_full)
## Train RMSE
error <- (mtcars$mpg - mtcars$predicted) ^2
rmse <- sqrt(mean(error))
## spilt data for train and test
n <- nrow(mtcars)
id <- sample(1:n,n*0.8)
train_data <- mtcars[id,]
test_data <- mtcars[-id,]
# train model
train_model <- lm(mpg~hp+wt,data= train_data)
predict_train <- predict(train_model)
error_train <- train_data$mpg - predict_train
rmse_train <- sqrt(mean(error_train)**2)
# test model
predict_test <- predict(train_model, newdata = test_data)
error_test <- train_data$mpg - predict_test
rmse_test <- sqrt(mean(error_test)**2)
## print result
cat("RMSE Train: ",rmse_train,
"\nRMSE Test: ",rmse_test)
## load library
mpg
## basic syntax
## ggplot(data = data_frame , mapping = aes(x=,y=,mapping) + geom_plot_type(setting)
ggplot(mtcars,aes(mpg)) +
geom_histogram(bins=8)
## how to choose visualization
## 1. number of variable
## 2. data type
## DRY Do not Repeat Yourself
base1 <- ggplot(diamonds,aes(price))
base2 <- ggplot(diamonds,aes(cut,fill=cut))
# sample data for represent entire data set
base3 <- ggplot(sample_n(diamonds,3000),aes(carat,price,color=cut))
## one variable : continuous (number)
p1 <- base1 + geom_histogram()
p2 <- base1 + geom_density()
p3 <- base1 + geom_boxplot()
# pacthwork -> mange to display multiple visulization
(p1 + p2) / p3
library(tidyverse)
